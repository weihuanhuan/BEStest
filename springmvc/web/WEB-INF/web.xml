<?xml version="1.0" encoding="UTF-8"?>
<!-- //JF 注意xml文件的编码，如果指定的编码是不支持中文的，那么保存之后中文便会乱码，
          同时这里的优先级是最高的，指定了之后便不能在ide中修改该文件的编码方案-->
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" id="WebApp_ID">

    <!--//JF servlet 版本问题 servlet 不同版本的 xmlns 也不同
        2.4 http://java.sun.com/xml/ns/j2ee
        3.0 http://java.sun.com/xml/ns/javaee
        3.1 http://xmlns.jcp.org/xml/ns/javaee
    -->

    <display-name>springmvc</display-name>

    <filter>
        <filter-name>UrlRewriteFilter</filter-name>
        <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
        
        <init-param>
            <param-name>logLevel</param-name>
            <param-value>INFO</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>UrlRewriteFilter</filter-name>
        <!-- 参考 servlet spec 4.0 章节 12.2 Specification of Mappings -->
        <!-- A string beginning with a ‘/’ character and ending with a ‘/*’ suffix is used for path mapping -->
        <url-pattern>/test/status/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
    </filter-mapping>

    <filter-mapping>
        <filter-name>UrlRewriteFilter</filter-name>
        <!--
            注意对于 UrlRewriteFilter 的状态页 /rewrite-status 来说其 url-pattern 必需要配置为包含 /rewrite-status 的模式才行，
            比如按照其默认配置 urlrewrite.xml 来说， UrlRewriteFilter 会依照其 rule 将 /test/status/ 重定向到 /rewrite-status 来处理,
            此时 tomcat 返回的 response code 为 302，因此浏览器重新发起对 /rewrite-status 的请求，
            假若配置的 UrlRewriteFilter 的 url-pattern 不能匹配 /rewrite-status，那么其将不会被加入请求的 ApplicationFilterChain 中。
            但是这个 /rewrite-status 页面是 UrlRewriteFilter 本身在其 doFilter 方法中处理的，
            在加之 tomcat 本身也没有对这个路径的处理，因此 tomcat 返回了 404 页面，
            如果直接访问 /rewrite-status 也是同理的 404，只是少了 redirect 这个过程。
        -->
        <url-pattern>/rewrite-status</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
    </filter-mapping>

    <servlet>
        <servlet-name>request</servlet-name>
        <servlet-class>Servlet.RequestTest</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>request</servlet-name>
        <url-pattern>/request</url-pattern>
    </servlet-mapping>

    <!-- spring DispatcherServlet servlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <!-- SpringMvc核心 servlet 实现类-->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <!--SpringMVC 配置文件 -->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!--springmvc 路径映射 -->
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <session-config>
        <session-timeout>60</session-timeout>
    </session-config>

    <!--<resource-ref>-->
    <!--<description>DB Connection</description>-->
    <!--<res-ref-name>jdbc/Server</res-ref-name>-->
    <!--<res-type>javax.sql.DataSource</res-type>-->
    <!--<res-auth>Container</res-auth>-->
    <!--</resource-ref>-->

    <!--应用的默认首页-->
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <!--受保护的web资源集配置-->
    <security-constraint>
        <!--受保护的资源集-->
        <web-resource-collection>
            <web-resource-name>protected resource</web-resource-name>
            <url-pattern>/auth/*</url-pattern>
            <!-- 用于登录的页面没有必要进行保护 -->
            <!--<url-pattern>/authbypass/*</url-pattern>-->
        </web-resource-collection>
        <!--可以合法访问本资源集的角色-->
        <auth-constraint>
            <role-name>springweb</role-name>
        </auth-constraint>
    </security-constraint>

    <!--应用的认证配置-->
    <login-config>
        <!--指定具体的认证方法-->
        <auth-method>FORM</auth-method>
        <!--BASIC 认证方式的安全域配置，用来username和password的哪个安全域中验证其合法性-->
        <realm-name>file</realm-name>
        <!--FORM 认证方式的特定配置-->
        <form-login-config>
            <form-login-page>/authbypass/formLogin.jsp</form-login-page>
            <form-error-page>/auth/error.jsp</form-error-page>
        </form-login-config>
    </login-config>

    <!--应用使用的角色配置,这里的角色需要对应到具体的 server 中，对于 tomcat 而言默认就是 tomcat-users.xml 中存在的角色 -->
    <security-role>
        <role-name>springweb</role-name>
    </security-role>

    <!-- 用于监听 session 的创建和销毁 -->
    <!--<listener>-->
        <!--<listener-class>listener.session.AuthSessionEventListener</listener-class>-->
    <!--</listener>-->

    <!-- 用于监听 session 属性的变化过程 -->
    <!--<listener>-->
        <!--<listener-class>listener.session.AuthSessionAttributeListener</listener-class>-->
    <!--</listener>-->

</web-app>
