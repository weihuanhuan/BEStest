<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>MiscellaneousTest</artifactId>
        <groupId>com.jasonfitch.test</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.jasonfitch.test</groupId>
    <artifactId>ear-demo-package</artifactId>
    <!--
        只要将工程的打包类型指定为 ear 后，maven就会自动引用 maven-ear-plugin 插件，
        并自动将该工程的依赖作为 ear 应用的子模块打包成一个 ear 包。
        这里子模块的类型识别主要是依赖于子模块的 <type> 属性值。
        比如 ejb 子模块应该指定其 type 为 <type>ejb</type>
    -->
    <packaging>ear</packaging>

    <build>
        <plugins>
            <!--
                这里手动引入 maven-ear-plugin 插件的作用是为了显示的配置打包后的 ear 模块。
                比如修改打包后的 ear 模块内部 web 子模块的模块文件名字。
                例如这个依赖的这里的 web 子模块默认命名为 【springmvc-1.0-SNAPSHOT.war】 ，而我们可以手动的将他配置为 【springmvc.jar】
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-ear-plugin</artifactId>
                <configuration>
                    <!--
                        默认情况下 maven 的 packaging 类型是没有 app-client 的，但是 maven-ear-plugin 插件却支持 app-client 模块的配置
                        因此 maven-ear-plugin 插件提供 artifactTypeMapping 配置来实现将 jar 打包的模块映射到 app-client 模块。
                        可以这么做的根本原因是由于 application client 模块本身和可执行 jar 包的打包是相同的，所以需要注意添加 MANIFEST 中的 main-class 属性。
                    -->
                    <artifactTypeMappings>
                        <artifactTypeMapping type="jar" mapping="app-client"/>
                    </artifactTypeMappings>

                    <modules>
                        <webModule>
                            <groupId>com.jasonfitch.test</groupId>
                            <artifactId>springmvc</artifactId>
                            <bundleFileName>springmvc.war</bundleFileName>
                        </webModule>

                        <appClientModule>
                            <groupId>com.jasonfitch.test</groupId>
                            <artifactId>feature</artifactId>
                            <bundleFileName>feature.jar</bundleFileName>
                        </appClientModule>
                    </modules>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>com.jasonfitch.test</groupId>
            <artifactId>springmvc</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>

        <dependency>
            <groupId>com.jasonfitch.test</groupId>
            <artifactId>feature</artifactId>
            <version>${project.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
            <!--
                对于一个确定的依赖其指定的 type 必须是在 maven 库中可以成定位的 artifact ，比如这里不能使用 app-client ，
                因为根本没有打包类型为 app-client 的符合这个坐标的 artifact，
                实际上这个坐标的原始打包类型就是 jar ，所以我们这里要填写 jar，而后续可以用

                另外，
                1.实际上 maven 中有专门的 maven-acr-plugin 插件，可以用来扩展 package 的类型，从而支持 app-client 类型的打包和依赖，
                  但是我们这里的场景中没有使用他的必要，
                  通过使用 maven-ear-plugin 插件的映射功能，我们可以将 jar 或者任何类型的依赖映射为 app-client 模块供其打包时使用。

                2.这不是一个真实的 app client 工程，其是一个普通的 jar 包，这里是当作 app client 模块来演示 ear 的子模块打包来使用的
            -->
            <type>jar</type>
        </dependency>
    </dependencies>

</project>